{"description_en":"","description_ru":"","cam":{"look_at":[0.0,0.0,0.0],"alpha":-60.88113,"beta":1.5852199,"r":3.849995},"uniforms":{"names":["room_size_x","room_size_x_minus","room_size_y","room_size_y_minus","room_size_z","room_size_z_minus","portal_border_size","portal_teleport_light","mobius_u_progress","mobius_border_u_progress","portal_color_progress","mobius_rotate_local_ox"],"storage":[{"Float":{"min":0.0,"max":null,"value":4.0}},{"Formula":"-room_size_x"},{"Float":{"min":0.0,"max":null,"value":4.0}},{"Formula":"-room_size_y"},{"Float":{"min":0.0,"max":null,"value":4.0}},{"Formula":"-room_size_z"},{"Float":{"min":null,"max":null,"value":0.17}},{"Bool":true},{"Float":{"min":0.5,"max":1.0,"value":0.5}},{"Float":{"min":0.0,"max":1.0,"value":0.0}},{"Float":{"min":0.0,"max":1.0,"value":0.0}},{"Angle":1.5882496193148399}]},"matrices":{"names":["id","room_origin","rx1","rx2","ry1","ry2","rz1","rz2","mrx1","mrx2","mry1","mry2","mrz1","mrz2","portal_0","portal_ox","portal","portal_a","portal_b","mportal_a","mportal_b"],"storage":[{"Simple":{"offset":[0.0,0.0,0.0],"scale":1.0,"rotate":[0.0,0.0,0.0],"mirror":[false,false,false]}},{"Simple":{"offset":[0.0,0.0,0.0],"scale":1.0,"rotate":[0.0,0.0,0.0],"mirror":[false,false,false]}},{"Parametrized":{"offset":{"x":{"Yes":"room_size_x"},"y":{"No":0.0},"z":{"No":0.0}},"rotate":{"x":{"No":0.0},"y":{"No":1.5707964},"z":{"No":0.0}},"mirror":{"x":{"No":0.0},"y":{"No":0.0},"z":{"No":0.0}},"scale":{"No":1.0}}},{"Parametrized":{"offset":{"x":{"Yes":"room_size_x_minus"},"y":{"No":0.0},"z":{"No":0.0}},"rotate":{"x":{"No":0.0},"y":{"No":1.5707964},"z":{"No":0.0}},"mirror":{"x":{"No":0.0},"y":{"No":0.0},"z":{"No":0.0}},"scale":{"No":1.0}}},{"Parametrized":{"offset":{"x":{"No":0.0},"y":{"Yes":"room_size_y"},"z":{"No":0.0}},"rotate":{"x":{"No":1.5707964},"y":{"No":0.0},"z":{"No":0.0}},"mirror":{"x":{"No":0.0},"y":{"No":0.0},"z":{"No":0.0}},"scale":{"No":1.0}}},{"Parametrized":{"offset":{"x":{"No":0.0},"y":{"Yes":"room_size_y_minus"},"z":{"No":0.0}},"rotate":{"x":{"No":1.5707964},"y":{"No":0.0},"z":{"No":0.0}},"mirror":{"x":{"No":0.0},"y":{"No":0.0},"z":{"No":0.0}},"scale":{"No":1.0}}},{"Parametrized":{"offset":{"x":{"No":0.0},"y":{"No":0.0},"z":{"Yes":"room_size_z"}},"rotate":{"x":{"No":0.0},"y":{"No":0.0},"z":{"No":0.0}},"mirror":{"x":{"No":0.0},"y":{"No":0.0},"z":{"No":0.0}},"scale":{"No":1.0}}},{"Parametrized":{"offset":{"x":{"No":0.0},"y":{"No":0.0},"z":{"Yes":"room_size_z_minus"}},"rotate":{"x":{"No":0.0},"y":{"No":0.0},"z":{"No":0.0}},"mirror":{"x":{"No":0.0},"y":{"No":0.0},"z":{"No":0.0}},"scale":{"No":1.0}}},{"Mul":{"to":"rx1","what":"room_origin"}},{"Mul":{"to":"rx2","what":"room_origin"}},{"Mul":{"to":"ry1","what":"room_origin"}},{"Mul":{"to":"ry2","what":"room_origin"}},{"Mul":{"to":"rz1","what":"room_origin"}},{"Mul":{"to":"rz2","what":"room_origin"}},{"Simple":{"offset":[0.0,0.0,0.0],"scale":1.0,"rotate":[0.0,0.0,1.5707964],"mirror":[false,false,false]}},{"Parametrized":{"offset":{"x":{"No":0.0},"y":{"No":0.0},"z":{"No":0.0}},"rotate":{"x":{"Yes":"mobius_rotate_local_ox"},"y":{"No":0.0},"z":{"No":0.0}},"mirror":{"x":{"No":0.0},"y":{"No":0.0},"z":{"No":0.0}},"scale":{"No":1.0}}},{"Mul":{"to":"portal_ox","what":"portal_0"}},{"Simple":{"offset":[0.0,0.0,0.0],"scale":1.0,"rotate":[0.0,0.0,0.0],"mirror":[false,false,false]}},{"Simple":{"offset":[0.0,0.0,0.0],"scale":1.0,"rotate":[3.1415927,0.0,0.0],"mirror":[false,false,false]}},{"Mul":{"to":"portal_a","what":"portal"}},{"Mul":{"to":"portal_b","what":"portal"}}]},"objects":{"names":["rx1","rx2","ry1","ry2","rz1","rz2","mobius"],"storage":[{"Flat":{"kind":{"Simple":"mrx1"},"is_inside":"return is_inside_square(x, y, room_size_z_u, room_size_y_u, room_yellow_M);"}},{"Flat":{"kind":{"Simple":"mrx2"},"is_inside":"return is_inside_square(x, y, room_size_z_u, room_size_y_u, room_red_M);"}},{"Flat":{"kind":{"Simple":"mry1"},"is_inside":"return is_inside_square(x, y, room_size_x_u, room_size_z_u, room_black_M);"}},{"Flat":{"kind":{"Simple":"mry2"},"is_inside":"return is_inside_square(x, y, room_size_x_u, room_size_z_u, room_gray_M);"}},{"Flat":{"kind":{"Simple":"mrz1"},"is_inside":"return is_inside_square(x, y, room_size_x_u, room_size_y_u, room_blue_texture_M);"}},{"Flat":{"kind":{"Simple":"mrz2"},"is_inside":"return is_inside_square(x, y, room_size_x_u, room_size_y_u, room_green_texture_M);"}},{"Complex":{"kind":{"Portal":["mportal_a","mportal_b"]},"intersect":"float max_u = mobius_u_progress_u * 2.0*PI;\nfloat border_u = portal_border_size_u * 0.5 * mobius_border_u_progress_u;\n\nSurfaceIntersection hit =  mobius_intersect(r, max_u);\nint material = portal_blue_M;\nif (first) { material = portal_orange_M; }\nif (abs(hit.v) < 1. - portal_border_size_u && hit.u < max_u - border_u && hit.u > border_u) {\n  if (portal_teleport_light_u == 1) {\n    material = TELEPORT;\n  } else {\n    material = portal_blue_M;//gray_grid_M;\n  }\n}\nreturn SceneIntersection(material, hit);"}}]},"textures":{"names":["monoportal"],"storage":["scenes/monoportal.png"]},"materials":{"names":["room_green_texture","room_green","room_red","room_gray","room_black","room_blue_texture","room_blue","room_yellow","portal_orange","portal_blue"],"storage":[{"Complex":{"code":"MaterialProcessing result = material_simple(hit, r, vec3(0.15478948,0.73873776,0.2186588), 5e-1, true, 1.0, 3e-1);\nresult.mul_to_color *= texture2D(monoportal_tex, vec2(room_size_x_u + hit.u, room_size_x_u-hit.v) / (room_size_x_u * 2.0)).rgb;\nreturn result;"}},{"Simple":{"color":[0.15478948,0.73873776,0.2186588],"normal_coef":0.5,"grid":true,"grid_scale":1.0,"grid_coef":0.3}},{"Simple":{"color":[0.8458183,0.07454156,0.07454156],"normal_coef":0.5,"grid":true,"grid_scale":1.0,"grid_coef":0.3}},{"Simple":{"color":[0.18068509,0.18068509,0.18068509],"normal_coef":0.5,"grid":true,"grid_scale":1.0,"grid_coef":0.3}},{"Simple":{"color":[0.029196177,0.029196177,0.029196177],"normal_coef":0.5,"grid":true,"grid_scale":1.0,"grid_coef":0.3}},{"Complex":{"code":"MaterialProcessing result = material_simple(hit, r, vec3(1.16e-1, 2.67e-1, 9.08e-1), 5e-1, true, 1.0, 3e-1);\nresult.mul_to_color *= texture2D(monoportal_tex, vec2(room_size_x_u - hit.u, room_size_x_u-hit.v) / (room_size_x_u * 2.0)).rgb;\nreturn result;"}},{"Simple":{"color":[0.116810285,0.26798066,0.9083436],"normal_coef":0.5,"grid":true,"grid_scale":1.0,"grid_coef":0.2}},{"Simple":{"color":[0.7647179,0.7024815,0.061205085],"normal_coef":0.5,"grid":true,"grid_scale":1.0,"grid_coef":0.3}},{"Complex":{"code":"MaterialProcessing result = material_simple(hit, r, vec3(0.6495146,0.2954198,0.03270938), 5e-1, false, 4e0, 3e-1);\nresult.mul_to_color *= portal_color_progress_u;\nreturn result;"}},{"Complex":{"code":"MaterialProcessing result = material_simple(hit, r, vec3(0.04732297,0.560074,0.68341726), 5e-1, false, 4e0, 3e-1);\nresult.mul_to_color *= portal_color_progress_u;\nreturn result;"}}]},"library":{"names":["room","mobius"],"storage":["int is_inside_square(float x, float y, float sizex, float sizey, int material) {\n  if (abs(x) < sizex && abs(y) < sizey) {\n    return material;\n  } else {\n    return NOT_INSIDE;\n  }\n}\n","vec2 two_lines_nearest_points(Ray a, Ray b) {\n    vec3 n = cross(a.d.xyz, b.d.xyz);\n    vec3 n1 = cross(a.d.xyz, n);\n    vec3 n2 = cross(b.d.xyz, n);\n    return vec2(\n        dot(b.o.xyz-a.o.xyz, n2)/dot(a.d.xyz, n2),\n        dot(a.o.xyz-b.o.xyz, n1)/dot(b.d.xyz, n1)\n    );\n}\n\nfloat project(vec3 a, vec3 to) {\n    return dot(a, to) / dot(to, to);\n}\n\nvec3 projection(vec3 a, vec3 to) {\n    return to * project(a, to);\n}\n\nfloat clamp_mod(float a, float max) {\n    a = max + mod(a, max);\n    if (a < 0.) {\n        a += max;\n    }\n    if (a > max) {\n        a -= max;\n    }\n    return a;\n}\n\nfloat clamp_angle(float a, float max) {\n    return clamp_mod(a, max);\n}\n\nvec3 mobius_o(float u) {\n    return vec3(cos(u), 0, sin(u));\n}\n\nvec3 mobius_d(float u) {\n    return vec3(cos(u/2.)*cos(u), sin(u/2.), cos(u/2.)*sin(u))/2.; // mobius\n}\n\nvec3 mobius_step(float u, Ray r) {\n    Ray l = Ray(vec4(mobius_o(u), 1.), vec4(mobius_d(u), 0.));\n    vec2 ts = two_lines_nearest_points(l, r);\n\n    vec3 lnearest = (l.o + l.d * ts.x).xyz;\n    vec3 rnearest = (r.o + r.d * ts.y).xyz;\n    \n    float distance = length(lnearest - rnearest);\n\n    if (abs(ts.x) > 1.) {\n        distance *= 2.0 * abs(ts.x);\n    }\n\n    if (ts.y < 0.) {\n        distance *= 4.0 * abs(ts.y);\n    }\n\n    return vec3(distance, ts.x, ts.y); // distance, v, t\n}\n\nvec3 mobius_d1(float v, float u) {\n    float a = sin(u/2.);\n    float b = cos(u/2.);\n    float c = sin(u);\n    float d = cos(u);\n    return vec3(\n        b*d/2., \n        b*c/2., \n        a/2.\n    );\n}\n\nvec3 mobius_d2(float v, float u) {\n    float a = sin(u/2.);\n    float b = cos(u/2.);\n    float c = sin(u);\n    float d = cos(u);\n    return vec3(\n        -(0.25*v*a*d+0.5*v*c*b+c), \n        -(0.25*(v*a*c-2.*d*(v*b+2.))), \n        0.25*v*b\n    );\n}\n\nstruct SearchResult {\n    float t;\n    float u;\n    float v;\n};\n\nSearchResult mobius_best_approx(float u, Ray r, float max, SearchResult best) {\n    float eps_der = 0.0001;\n    float eps_newton = 0.0001;\n\n    vec3 step = mobius_step(u, r);\n    for (int k = 0; k < 10; k++) {\n        if (step.x < eps_newton) {\n            break;\n        }\n        float du = -step.x/(mobius_step(u + eps_der, r).x - step.x)*eps_der;\n        u = clamp_angle(u + du, max);\n        step = mobius_step(u, r);\n        if (best.t > 0. && abs(u-best.u) < 0.01) {\n            return SearchResult(-1., 0., 0.);\n        }\n    }\n\n    if (step.x < eps_newton) {\n        return SearchResult(step.z, u, step.y);    \n    } else {\n        return SearchResult(-1., 0., 0.);\n    }\n}\n\nSearchResult update_best_approx(SearchResult best, SearchResult current) {\n    if (current.t > 0. && (current.v > -1. && current.v < 1.)) {\n        if (best.t < 0.) {\n            best = current;\n        } else {\n            if (current.t < best.t) {\n                best = current;\n            }\n        }\n    }\n    return best;\n}\n\nSearchResult mobius_find_best(Ray r, float max) {\n    SearchResult best = SearchResult(-1., 0., 0.);\n    best = update_best_approx(best, mobius_best_approx(0., r, max, best));\n    best = update_best_approx(best, mobius_best_approx(PI, r, max, best));\n    for (int i = 0; i < 2; i++) {\n        float u = float(i*2 + 1)/4. * 2. * PI;\n        best = update_best_approx(best, mobius_best_approx(u, r, max, best));\n    }\n    for (int i = 0; i < 4; i++) {\n        float u = float(i*2 + 1)/8. * 2. * PI;\n        best = update_best_approx(best, mobius_best_approx(u, r, max, best));\n    }\n    if (best.t < 0.) {\n        return best;\n    }\n    best = update_best_approx(best, mobius_best_approx(float(8 - 1)/16. * 2. * PI, r, max, best));\n    best = update_best_approx(best, mobius_best_approx(float(8 + 1)/16. * 2. * PI, r, max, best));\n    return best;\n}\n\nbool intersect_mobius_sphere(Ray r) {\n    vec3 op = -r.o.xyz;\n    float b = dot(op, r.d.xyz);\n    float det = b * b - dot(op, op) + 2.4055; // 1.55²\n    return det >= 0.;\n}\n\nSurfaceIntersection mobius_intersect(Ray r, float max) {\n    if (intersect_mobius_sphere(r)) {\n        SearchResult best = mobius_find_best(r, max);\n        if (best.t >= 0.) {\n            vec3 normal = normalize_normal(cross(mobius_d1(best.v, best.u), mobius_d2(best.v, best.u)), r.d.xyz);\n            return SurfaceIntersection(true, best.t, best.u, best.v, normal);\n        }\n    }\n\n    return intersection_none;\n}"]},"user_uniforms":{"uniforms":[false,false,false,false,false,false,false,false,false,false,false,false]},"animation_stages":{"names":[],"storage":[]},"current_stage":5}