(desc:(eng:"",rus:""),cam:(look_at:(0,0,0.01),alpha:-74.47168884839253,beta:1.0086805401914818,r:1.3494015130034247,offset_after_material:0.000015000000000000002),uniforms:(ids:(available:[(12)],max:29),storage:{(0):Named(Float((min:Some(0),max:None,value:4)),"room_size_x"),(1):Named(Float((min:Some(0),max:None,value:4)),"room_size_y"),(2):Named(Float((min:Some(0),max:None,value:4)),"room_size_z"),(3):Inline(Formula(("-room_size_x"))),(4):Inline(Formula(("-room_size_y"))),(5):Inline(Formula(("-room_size_z"))),(6):Named(Progress(0),"portal_black_color_progress"),(7):Named(Bool(true),"teleport_light"),(8):Named(Bool(false),"mirror"),(9):Named(Float((min:Some(0),max:None,value:0.21)),"a"),(10):Named(Float((min:Some(0),max:None,value:0.35)),"b"),(11):Named(Bool(false),"enable_black_border"),(13):Inline(Formula(("a"))),(14):Inline(Formula(("-a+b/2"))),(15):Inline(Formula(("c"))),(16):Inline(Formula(("pi()*rot"))),(17):Inline(Formula(("-0.225\n"))),(18):Inline(Formula(("-b+a*2"))),(19):Inline(Formula(("-b+a"))),(20):Inline(Formula(("1.5*pi()*rot"))),(21):Inline(Formula(("2*a*rot"))),(22):Inline(Formula(("2*a*rot"))),(23):Inline(Formula(("2*a*rot"))),(24):Inline(Formula(("-a"))),(25):Inline(Formula(("-a"))),(26):Inline(Formula(("-a"))),(27):Inline(Formula(("pi()*rot"))),(28):Inline(Formula(("1.5*pi()*rot")))},storage_order:[(0),(1),(2),(6),(7),(8),(9),(10),(11)]),matrices:(ids:(available:[(40),(41)],max:48),storage:{(0):Named(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"room_origin"),(1):Inline(Mul(to:Some(((2))),what:Some(((0))))),(2):Inline(Parametrized(offset:(x:Yes(Some(((0)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(1.5707963267948966),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(3):Inline(Mul(to:Some(((4))),what:Some(((0))))),(4):Inline(Parametrized(offset:(x:Yes(Some(((3)))),y:No(0),z:No(0)),rotate:(x:No(0),y:No(1.5707963267948966),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(5):Inline(Mul(to:Some(((6))),what:Some(((0))))),(6):Inline(Parametrized(offset:(x:No(0),y:Yes(Some(((1)))),z:No(0)),rotate:(x:No(1.5707963267948966),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(7):Inline(Mul(to:Some(((8))),what:Some(((0))))),(8):Inline(Parametrized(offset:(x:No(0),y:Yes(Some(((4)))),z:No(0)),rotate:(x:No(1.5707963267948966),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(9):Inline(Mul(to:Some(((10))),what:Some(((0))))),(10):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((2))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(11):Inline(Mul(to:Some(((12))),what:Some(((0))))),(12):Inline(Parametrized(offset:(x:No(0),y:No(0),z:Yes(Some(((5))))),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(13):Named(Mul(to:Some(((44))),what:Some(((28)))),"portal1"),(14):Named(Mul(to:Some(((43))),what:Some(((29)))),"portal2"),(15):Named(Mul(to:Some(((45))),what:Some(((30)))),"portal3"),(16):Named(Simple(offset:(0,0,0),scale:1,rotate:(4.71238898038469,0,0),mirror:(false,false,false)),"c1"),(17):Named(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"p1"),(18):Named(Simple(offset:(0,0,0),scale:1,rotate:(1.5707963267948966,3.141592653589793,1.5707963267948966),mirror:(false,false,false)),"p2"),(19):Named(Simple(offset:(0,0,0),scale:1,rotate:(1.5707963267948966,1.5707963267948966,0),mirror:(false,false,false)),"a1"),(20):Named(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"b1"),(21):Named(Simple(offset:(0,0,0),scale:1,rotate:(1.5707963267948966,1.5707963267948966,0),mirror:(false,false,false)),"p3"),(22):Named(Mul(to:Some(((17))),what:Some(((15)))),"portal3_p1"),(23):Named(Mul(to:Some(((18))),what:Some(((15)))),"portal3_p2"),(24):Named(Mul(to:Some(((21))),what:Some(((15)))),"portal3_p3"),(25):Named(Mul(to:Some(((17))),what:Some(((36)))),"portal4_p1"),(26):Named(Mul(to:Some(((18))),what:Some(((36)))),"portal4_p2"),(27):Named(Mul(to:Some(((21))),what:Some(((36)))),"portal4_p3"),(28):Named(Simple(offset:(0,0,0),scale:0.89,rotate:(0,0,0),mirror:(false,false,false)),"room_r"),(29):Named(Simple(offset:(15,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"room_b"),(30):Named(Simple(offset:(30,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"room_g"),(31):Inline(Parametrized(offset:(x:No(0.25),y:No(0),z:No(0)),rotate:(x:No(0),y:No(0),z:No(0)),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(32):Inline(Parametrized(offset:(x:No(0),y:No(0),z:No(0)),rotate:(x:No(0),y:Yes(Some(((27)))),z:Yes(Some(((28))))),mirror:(x:No(0),y:No(0),z:No(0)),scale:No(1))),(33):Named(Mul(to:Some(((17))),what:Some(((13)))),"portal1_p1"),(34):Named(Mul(to:Some(((18))),what:Some(((13)))),"portal1_p2"),(35):Named(Mul(to:Some(((21))),what:Some(((13)))),"portal1_p3"),(36):Named(Mul(to:Some(((46))),what:Some(((42)))),"portal4"),(37):Named(Mul(to:Some(((17))),what:Some(((14)))),"portal2_p1"),(38):Named(Mul(to:Some(((18))),what:Some(((14)))),"portal2_p2"),(39):Named(Mul(to:Some(((21))),what:Some(((14)))),"portal2_p3"),(42):Named(Simple(offset:(45,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"room_y"),(43):Inline(Simple(offset:(0,0,0),scale:1,rotate:(1.1519173063162573,0,0),mirror:(false,false,false))),(44):Inline(Simple(offset:(0,0,0),scale:1,rotate:(0,0.08726646259971647,0),mirror:(false,false,false))),(45):Inline(Simple(offset:(0,0,0),scale:1,rotate:(0,0.17453292519943295,0),mirror:(false,false,false))),(46):Inline(Simple(offset:(-0.45,0.32,0),scale:1,rotate:(0,0,0.3490658503988659),mirror:(false,false,false))),(47):Named(Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),"empty")},storage_order:[(0),(19),(20),(16),(17),(18),(21),(13),(14),(15),(36),(33),(34),(35),(37),(38),(39),(22),(23),(24),(25),(26),(27),(28),(29),(30),(42),(47)]),objects:(ids:(available:[(10)],max:12),storage:{(0):Named(Flat(kind:Simple(Some(((1)))),is_inside:(("return is_inside_square(x, y, room_size_z_u, room_size_y_u, room_yellow_M);"))),"room_x+"),(1):Named(Flat(kind:Simple(Some(((3)))),is_inside:(("return is_inside_square(x, y, room_size_z_u, room_size_y_u, room_red_M);"))),"room_x-"),(2):Named(Flat(kind:Simple(Some(((5)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_z_u, room_black_M);"))),"room_y+"),(3):Named(Flat(kind:Simple(Some(((7)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_z_u, room_gray_M);"))),"room_y-"),(4):Named(Flat(kind:Simple(Some(((9)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_y_u, room_blue_M);"))),"room_z+"),(5):Named(Flat(kind:Simple(Some(((11)))),is_inside:(("return is_inside_square(x, y, room_size_x_u, room_size_y_u, room_green_M);"))),"room_z-"),(6):Named(Complex(kind:Simple(Some(((28)))),intersect:(("return intersect_box(r, room_red_M);"))),"room_r"),(7):Named(Complex(kind:Simple(Some(((29)))),intersect:(("return intersect_box(r, room_blue_M);"))),"room_b"),(8):Named(Complex(kind:Simple(Some(((30)))),intersect:(("return intersect_box(r, room_green_M);"))),"room_g"),(9):Named(Complex(kind:Simple(Some(((42)))),intersect:(("return intersect_box(r, room_yellow_M);"))),"room_y"),(11):Named(Complex(kind:Portal(Some(((47))),Some(((47)))),intersect:(("SceneIntersection sc = scene_intersection_none;\nbool f = first;\n\n// WIP two self-hiding\n/*\nsc=pp(sc,r,f,  0, 1,  1, 0);\nsc=pp(sc,r,f,  1, 1,  0, 0);\n\nsc=pp(sc,r,f,  0, 0,  2, 0);\nsc=pp(sc,r,f,  1, 0,  2, 1);\n\nsc=pp(sc,r,f,  2, 0,  0, 1);\nsc=pp(sc,r,f,  2, 1,  2, 2);\nsc=pp(sc,r,f,  2, 2,  1, 1);\n*/\n\n/*\nsc=pp(sc,r,f,  0, 1,  1, 0);\nsc=pp(sc,r,f,  1, 1,  0, 0);\n\nsc=pp(sc,r,f,  0, 0,  2, 0);\nsc=pp(sc,r,f,  1, 0,  3, 0);\n\nsc=pp(sc,r,f,  2, 0,  3, 2);\nsc=pp(sc,r,f,  2, 1,  3, 1);\nsc=pp(sc,r,f,  2, 2,  1, 1);\n\nsc=pp(sc,r,f,  3, 0,  2, 1);\nsc=pp(sc,r,f,  3, 1,  2, 2);\nsc=pp(sc,r,f,  3, 2,  0, 1);\n*/\n\n/*\n// WIP four portals 2\nsc=pp(sc,r,f,  0, 0,  1, 0);\nsc=pp(sc,r,f,  0, 1,  2, 1);\nsc=pp(sc,r,f,  0, 2,  3, 2);\n\nsc=pp(sc,r,f,  1, 0,  2, 0);\nsc=pp(sc,r,f,  1, 1,  3, 1);\nsc=pp(sc,r,f,  1, 2,  0, 2);\n\nsc=pp(sc,r,f,  2, 0,  3, 0);\nsc=pp(sc,r,f,  2, 1,  0, 1);\nsc=pp(sc,r,f,  2, 2,  1, 2);\n\nsc=pp(sc,r,f,  3, 0,  0, 0);\nsc=pp(sc,r,f,  3, 1,  2, 1);\nsc=pp(sc,r,f,  3, 2,  1, 2);\n*/\n\n// ------------------------------\n\n// self-hiding monoportal\n/*\nsc=pp(sc,r,f,  0, 0,  0, 1);\nsc=pp(sc,r,f,  0, 1,  0, 0);\n*/\n\n/*\n// rotating monoportal\nsc=pp(sc,r,f,  0, 0,  0, 1);\nsc=pp(sc,r,f,  0, 1,  0, 2);\nsc=pp(sc,r,f,  0, 2,  0, 0);\n*/\n\n/*\n// two portals\nsc=pp(sc,r,f,  0, 0,  1, 0);\nsc=pp(sc,r,f,  0, 1,  1, 1);\nsc=pp(sc,r,f,  0, 2,  1, 2);\nsc=pp(sc,r,f,  1, 0,  0, 0);\nsc=pp(sc,r,f,  1, 1,  0, 1);\nsc=pp(sc,r,f,  1, 2,  0, 2);\n*/\n\n// three self-hiding monoportals\n/*\nsc=pp(sc,r,f,  0, 1,  1, 0);\nsc=pp(sc,r,f,  1, 1,  2, 0);\nsc=pp(sc,r,f,  2, 1,  0, 0);\nsc=pp(sc,r,f,  0, 0,  2, 1);\nsc=pp(sc,r,f,  1, 0,  0, 1);\nsc=pp(sc,r,f,  2, 0,  1, 1);\n*/\n\n/*\n// three portals\nsc=pp(sc,r,f,  0, 0,  1, 0);\nsc=pp(sc,r,f,  0, 1,  1, 1);\nsc=pp(sc,r,f,  0, 2,  1, 2);\nsc=pp(sc,r,f,  1, 0,  2, 0);\nsc=pp(sc,r,f,  1, 1,  2, 1);\nsc=pp(sc,r,f,  1, 2,  2, 2);\nsc=pp(sc,r,f,  2, 0,  0, 0);\nsc=pp(sc,r,f,  2, 1,  0, 1);\nsc=pp(sc,r,f,  2, 2,  0, 2);\n*/\n\n/*\n// four portals\nsc=pp(sc,r,f,  0, 0,  1, 0);\nsc=pp(sc,r,f,  0, 1,  1, 1);\nsc=pp(sc,r,f,  0, 2,  1, 2);\nsc=pp(sc,r,f,  1, 0,  2, 0);\nsc=pp(sc,r,f,  1, 1,  2, 1);\nsc=pp(sc,r,f,  1, 2,  2, 2);\nsc=pp(sc,r,f,  2, 0,  3, 0);\nsc=pp(sc,r,f,  2, 1,  3, 1);\nsc=pp(sc,r,f,  2, 2,  3, 2);\nsc=pp(sc,r,f,  3, 0,  0, 0);\nsc=pp(sc,r,f,  3, 1,  0, 1);\nsc=pp(sc,r,f,  3, 2,  0, 2);\n*/\n\n\nreturn sc;"))),"Trefoil knot")},storage_order:[(0),(1),(2),(3),(4),(5),(6),(7),(8),(9),(11)]),cameras:(ids:(available:[],max:0),storage:{},storage_order:[]),textures:(ids:(available:[],max:1),storage:{(0):Named(("scenes/monoportal.png"),"texture")},storage_order:[(0)]),materials:(ids:(available:[],max:22),storage:{(0):Named(Simple(color:(0.7647179,0.7024815,0.061205085),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_yellow"),(1):Named(Simple(color:(0.029196177,0.029196177,0.029196177),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_black"),(2):Named(Simple(color:(0.8431372549019608,0.36470588235294116,0.36470588235294116),normal_coef:0.5,grid:true,grid_scale:2.5,grid_coef:0.3),"room_red"),(3):Named(Simple(color:(0.18068509,0.18068509,0.18068509),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_gray"),(4):Named(Simple(color:(0.116810285,0.26798066,0.9083436),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_blue"),(5):Named(Simple(color:(0.15478948,0.73873776,0.2186588),normal_coef:0.5,grid:true,grid_scale:1,grid_coef:0.3),"room_green"),(6):Named(Simple(color:(0.03529411764705882,0.6431372549019608,0.788235294117647),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"portal_blue"),(7):Named(Simple(color:(0.9294117647058824,0.4235294117647059,0.050980392156862744),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"portal_orange"),(8):Named(Simple(color:(0.6666666666666666,0.6666666666666666,0.6666666666666666),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3),"grid_gray"),(9):Named(Simple(color:(0.043137254901960784,0.043137254901960784,0.043137254901960784),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"triangle_black"),(10):Named(Simple(color:(0.7686274509803922,0.7686274509803922,0.7686274509803922),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"triangle_white"),(11):Named(Simple(color:(1,0.24313725490196078,0.24313725490196078),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3),"solid_0"),(12):Named(Simple(color:(0.24313725490196078,1,0.25098039215686274),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3),"solid_1"),(13):Named(Simple(color:(0.1843137254901961,0.19607843137254902,1),normal_coef:0.5,grid:true,grid_scale:5,grid_coef:0.3),"solid_2"),(14):Named(Simple(color:(1,0.9764705882352941,0.15294117647058825),normal_coef:0.5,grid:true,grid_scale:4,grid_coef:0.3),"solid_3"),(15):Named(Complex(code:(("MaterialProcessing result = material_simple(hit, r, vec3(0.15478948,0.73873776,0.2186588), 5e-1, true, 1.0, 3e-1);\nresult.mul_to_color *= texture(texture_tex, vec2(room_size_x_u + hit.u, room_size_x_u-hit.v) / (room_size_x_u * 2.0)).rgb;\nreturn result;"))),"room_green_texture"),(16):Named(Complex(code:(("MaterialProcessing result = material_simple(hit, r, vec3(1.16810285e-1, 2.6798066e-1, 9.083436e-1), 5e-1, true, 1.0, 3e-1);\nresult.mul_to_color *= texture(texture_tex, vec2(room_size_x_u + hit.u, room_size_x_u-hit.v) / (room_size_x_u * 2.0)).rgb;\nreturn result;"))),"room_blue_texture"),(17):Named(Reflect(add_to_color:(1,1,1)),"mirror"),(18):Named(Simple(color:(0,0,0),normal_coef:0.5,grid:false,grid_scale:4,grid_coef:0.3),"solid_black"),(19):Named(Complex(code:(("MaterialProcessing result = material_simple(hit, r, vec3(0.04732297,0.560074,0.68341726), 5e-1, false, 4e0, 3e-1);\nresult.mul_to_color *= (1.0 - portal_black_color_progress_u);\nreturn result;"))),"portal_blue_black"),(20):Named(Complex(code:(("MaterialProcessing result = material_simple(hit, r, vec3(0.6495146,0.2954198,0.03270938), 5e-1, false, 4e0, 3e-1);\nresult.mul_to_color *= (1.0 - portal_black_color_progress_u);\nreturn result;"))),"portal_orange_black"),(21):Named(Complex(code:(("return material_teleport(hit, r, get_mat(int(hit.v)) * get_mat_inv(int(hit.u)));"))),"custom_teleport")},storage_order:[(0),(2),(1),(3),(4),(16),(5),(15),(6),(19),(7),(20),(17),(8),(9),(10),(18),(11),(12),(13),(14),(21)]),library:(ids:(available:[],max:6),storage:{(0):Named((("int is_inside_square(float x, float y, float sizex, float sizey, int material) {\n  if (abs(x) < sizex && abs(y) < sizey) {\n    return material;\n  } else {\n    return NOT_INSIDE;\n  }\n}\n")),"room"),(1):Named((("SceneIntersection intersect_box(Ray r, int material) {\nvec3 rad = vec3(4., 4., 4.);\nvec3 m = 1.0/r.d.xyz;\nvec3 n = m*r.o.xyz;\nvec3 k = abs(m)*rad;\nvec3 t1 = -n - k;\nvec3 t2 = -n + k;\n\nfloat tN = max( max( t1.x, t1.y ), t1.z );\nfloat tF = min( min( t2.x, t2.y ), t2.z );\n\nfloat t = tN;\nif (tN < 0.0 && tF > 0.0) t = tF;\n\nif(tN > tF) return scene_intersection_none;\n\nif(t < 0.0) return scene_intersection_none;\n\nvec3 oN = -sign(r.d.xyz)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n\nvec3 pos = (r.o + r.d * t).xyz;\n\nvec2 uv = vec2(pos.x, pos.y);\nif (abs(abs(pos.x) - rad.x) < 0.0001) {\n  uv = vec2(pos.y, pos.z);\n}\nif (abs(abs(pos.y) - rad.y) < 0.0001) {\n  uv = vec2(pos.x, pos.z);\n}\n\nreturn SceneIntersection(material, SurfaceIntersection(true, t, uv.x, uv.y, normalize_normal(r.d.xyz, oN)));\n}")),"box"),(2):Named((("bool invert_if(bool value, bool condition) {\n  if (condition) {\n    return !value;\n  } else {\n    return value;\n  }\n}")),"common"),(3):Named((("float circle_distance(float x, float y) {\n  return sqrt(sqr(x) + sqr(y));\n}\n\nfloat ellipse_distance(float x, float y) {\n  return sqrt(2.*sqr(x) + sqr(y));\n}\n\nfloat square_distance(float x, float y) {\n  return max(abs(x), abs(y));\n}\n\nfloat rect_distance(float x, float y, float a, float b) {\n  return max(abs(x)-a+1., abs(y)-b+1.);\n}\n\nfloat triangle_distance(float x, float y, float k1, float k2, float y1) {\n  return max(\n    (y-k1*x)/sqrt(1.0+sqr(k1)),\n  max(\n    (y-k2*x)/sqrt(1.0+sqr(k2)),\n    -y1 * y\n  ));\n}\n\nint is_inside_object(\r\n  float distance, \r\n  float size, \r\n  float border,\r\n  int material_inner, \r\n  int material_border\n) {\r\n  if (distance < size) return material_inner;\r\n  if (distance < size + border) return material_border;\r\n  return NOT_INSIDE;\r\n}\n\nint is_inside_portal(\n  float distance, \n  float size, \n  float border,\n  float black_border,\n  int material_first, \n  int material_second, \n  int grid_material_first, \n  int grid_material_second, \n  bool back,\n  bool first\n) {\n  int material = material_second;\n  if (first) { material = material_first; }\n\n  if (distance < size) {\n    if (back) {\n      return material;      \n    } else {\n      if (teleport_light_u == 1) {\n      \tif (mirror_u == 1) {\n          return mirror_M;\n        } else {\n          return TELEPORT;\n        }\n      } else {\n        if (first) {\n          return grid_material_first;\n        } else {\n          return grid_material_second;\n        }\n      }\n    }\n  }\n  int black_material = solid_black_M;\n  if (_black_border_disable == 1) black_material = material;\n  if (distance < size + black_border && !back) return black_material;\n  if (distance < size + black_border + border) return material;\n  if (distance < size + black_border + border + black_border) return black_material;\n\n  return NOT_INSIDE;\n}")),"portal"),(4):Named((("int is_inside_part(vec4 pos, float x, float y, bool back) {\n  return is_inside_square(x, y, 0.3, 0.3, room_yellow_M);\n}\n\nSurfaceIntersection cap_body(Ray r, vec3 pa, vec3 pb, float radius) {\n    vec3 ro = r.o.xyz;\n    vec3 rd = r.d.xyz;\n    vec3 ba = pb - pa;\n    vec3 oa = ro - pa;\n\n    float baba = dot(ba,ba);\n    float bard = dot(ba,rd);\n    float baoa = dot(ba,oa);\n    float rdoa = dot(rd,oa);\n    float oaoa = dot(oa,oa);\n\n    float a = baba      - bard*bard;\n    float b = baba*rdoa - baoa*bard;\n    float c = baba*oaoa - baoa*baoa - radius*radius*baba;\n    float h = b*b - a*c;\n    if( h>=0.0 ) {\n        float t = (-b-sqrt(h))/a;\n        float y = baoa + t*bard;\n        // body\n        if( y>0.0 && y<baba ) {\n            vec3 pos = ro + rd * t;\n            return SurfaceIntersection(true, t, 0., 0., cap_normal(pos, pa, pb, radius));\n        }\n    }\n    return intersection_none;\n}\n\nSceneIntersection intersect_part(Ray r, bool first, bool is_portal, bool back) {\n  SceneIntersection i = SceneIntersection(0, intersection_none);\n  SurfaceIntersection hit = intersection_none;\n  SurfaceIntersection hit2 = intersection_none;\n  SurfaceIntersection hita = intersection_none;\n  SurfaceIntersection hitb = intersection_none;\n  vec3 normal = vec3(0.);\n  float sz = 0.1;\n  float szb = 0.01;\n  vec4 ro = r.o;\n  float radius = 0.025;\n\n  int border_material = portal_blue_M;\n  if (first) {\n    border_material = triangle_black_M; // portal_orange_M\n  }\n\nif (!back) {\n  vec3 c1 = vec3(0., a_u*2., 0.);\n  vec3 c2 = vec3(b_u*2., a_u*2., 0.);\n  vec3 c3 = vec3(b_u*2., (-b_u+a_u)*2., 0.);\n  vec3 c4 = vec3(b_u*2.,(-b_u+a_u)*2., a_u*2.);\n  vec3 c5 = vec3(0., (-b_u+a_u)*2., a_u*2.);\n  vec3 c6 = vec3(0., 0., a_u*2.);\n  float br = 0.005;\n\n  hit = cap_body(r, c1, c2, radius);\n  if (nearer(i, hit)) {\n      i.material = border_material;\n      i.hit = hit;\n  }\nif (enable_black_border_u == 1) {\n  hita = hit;\n  hit = cap_body(r, c1-(c2-c1)*10., c2, radius);\n  hit2 = cap_body(r, c1, c2-vec3(radius+br, 0., 0.), radius+br);\n  if (!hita.hit && !hit.hit && nearer(i, hit2)) {\n    i.hit = hit2;\n    i.material = solid_black_M;\n  }\n}\n\n  hit = cap(r, c2, c3, radius);\n  if (nearer(i, hit)) {\n      i.material = border_material;\n      i.hit = hit;\n  }\nif (enable_black_border_u == 1) {\n  hitb = hit;\n  hit2 = cap_body(r, c2-vec3(0., radius+br, 0.), c3+vec3(0., radius+br, 0.), radius+br);\n  if (!hit.hit && nearer(i, hit2)) {\n    i.hit = hit2;\n    i.material = solid_black_M;\n  }\n  \n  hit2 = cap(r, c2-vec3(0., radius+br, 0.), c2, radius+br);\n  if (!hita.hit && !hitb.hit && nearer(i, hit2)) {\n    i.hit = hit2;\n    i.material = solid_black_M;\n  }\n\n  hit2 = cap(r, c2-vec3(radius+br, 0., 0.), c2, radius+br);\n  if (!hita.hit && !hitb.hit && nearer(i, hit2)) {\n    i.hit = hit2;\n    i.material = solid_black_M;\n  }\n\n  hita = hitb;\n}\n  hit = cap(r, c3, c4, radius);\n  if (nearer(i, hit)) {\n      i.material = border_material;\n      i.hit = hit;\n  }\nif (enable_black_border_u == 1) {\n  hitb = hit;\n  hit2 = cap_body(r, c3+vec3(0., 0., radius+br), c4-vec3(0., 0., radius+br), radius+br);\n  if (!hit.hit && nearer(i, hit2)) {\n    i.hit = hit2;\n    i.material = solid_black_M;\n  }\n\n  hit2 = cap(r, c3+vec3(0., radius+br, 0.), c3, radius+br);\n  if (!hita.hit && !hitb.hit && nearer(i, hit2)) {\n    i.hit = hit2;\n    i.material = solid_black_M;\n  }\n  hit2 = cap(r, c3+vec3(0., 0., radius+br), c3, radius+br);\n  if (!hita.hit && !hitb.hit && nearer(i, hit2)) {\n    i.hit = hit2;\n    i.material = solid_black_M;\n  }\n\n  hita = hitb;\n}\n  hit = cap(r, c4, c5, radius);\n  if (nearer(i, hit)) {\n      i.material = border_material;\n      i.hit = hit;\n  }\nif (enable_black_border_u == 1) {\n  hitb = hit;\n  hit2 = cap_body(r, c4-vec3(radius+br, 0., 0.), c5+vec3(radius+br, 0., 0.), radius+br);\n  if (!hit.hit && nearer(i, hit2)) {\n    i.hit = hit2;\n    i.material = solid_black_M;\n  }\n\n  hit2 = cap(r, c4-vec3(radius+br, 0., 0.), c4, radius+br);\n  if (!hita.hit && !hitb.hit && nearer(i, hit2)) {\n    i.hit = hit2;\n    i.material = solid_black_M;\n  }\n  hit2 = cap(r, c4-vec3(0., 0., radius+br), c4, radius+br);\n  if (!hita.hit && !hitb.hit && nearer(i, hit2)) {\n    i.hit = hit2;\n    i.material = solid_black_M;\n  }\n\n\n  hita = hitb;\n}\n  hit = cap_body(r, c5, c6, radius);\n  if (nearer(i, hit)) {\n      i.material = border_material;\n      i.hit = hit;\n  }\nif (enable_black_border_u == 1) {\n  hitb = hit;\n  hit = cap_body(r, c6-(c5-c6)*10., c5, radius);\n  hit2 = cap_body(r, c5+vec3(0., radius+br, 0.), c6, radius+br);\n  if (!hit.hit && !hitb.hit && nearer(i, hit2)) {\n    i.hit = hit2;\n    i.material = solid_black_M;\n  }\n  hit2 = cap(r, c5+vec3(radius+br, 0., 0.), c5, radius+br);\n  if (!hita.hit && !hitb.hit && nearer(i, hit2)) {\n    i.hit = hit2;\n    i.material = solid_black_M;\n  }\n  hit2 = cap(r, c5+vec3(0., radius+br, 0.), c5, radius+br);\n  if (!hita.hit && !hitb.hit && nearer(i, hit2)) {\n    i.hit = hit2;\n    i.material = solid_black_M;\n  }\n}\n}\n\n  if (!is_portal) return i;\n  \n  r.o = ro - vec4(0., -b_u+a_u, a_u, 0.);\n  normal = -get_normal(a1_mat);\n  hit = plane_intersect(r, a1_mat_inv, get_normal(a1_mat));\n  if (nearer(i, hit)) { \n    int inside = NOT_INSIDE;\n    float distance = rect_distance(hit.u, hit.v, b_u-a_u, a_u);\n    if (distance <= 1.0 && is_collinear(hit.n, normal) == back) {\n      i.hit = hit;\n      i.material = TELEPORT;\n    }\n  }\n\n  r.o = ro - vec4(b_u, -b_u+a_u*2., 0., 0.);\n  normal = -get_normal(b1_mat);\n  hit = plane_intersect(r, b1_mat_inv, get_normal(b1_mat));\n  if (nearer(i, hit)) { \n    float distance = rect_distance(hit.u, hit.v, b_u, b_u);\n    if (distance <= 1.0 && is_collinear(hit.n, normal) == back) {\n      i.hit = hit;\n      i.material = TELEPORT;\n    }\n  }\n\n  r.o = ro - vec4(b_u, -2.*b_u+a_u*2., a_u, 0.);\n  normal = -get_normal(c1_mat);\n  hit = plane_intersect(r, c1_mat_inv, get_normal(c1_mat));\n  if (nearer(i, hit)) { \n    int inside = NOT_INSIDE;\n    float distance = rect_distance(hit.u, hit.v, b_u, a_u);\n    if (distance <= 1.0 && is_collinear(hit.n, normal) == back) {\n      i.hit = hit;\n      i.material = TELEPORT;\n    }\n  }\n\n  return i;\n}")),"part"),(5):Named((("SceneIntersection intersect_parts_helper(\n    Ray r,\n    bool first,\n    mat4 m_mat,\n    mat4 m_inv,\n    float first_no,\n    float second_no\n) {\n    Ray transformed_ray = transform(m_inv, r);\n    float len = length(transformed_ray.d);\n    transformed_ray.d = normalize(transformed_ray.d);\n    SceneIntersection ihit = intersect_part(transformed_ray, first, true, first);\n    ihit.hit.t /= len;\n    if (ihit.hit.hit && ihit.material != NOT_INSIDE) { \n        if (ihit.material == TELEPORT) { \n            ihit.material = custom_teleport_M;\n            ihit.hit.u = first_no;\n            ihit.hit.v = second_no;\n        }\n        ihit.hit.n = normalize((m_mat * vec4(ihit.hit.n, 0.)).xyz);\n        return ihit;\n    }\n    return scene_intersection_none;\n}\n\nSceneIntersection intersect_parts(\n    Ray r,\n    bool first,\n    mat4 first_mat,\n    mat4 first_inv,\n    float first_no,\n    mat4 second_mat,\n    mat4 second_inv,\n    float second_no\n) {\n    if (!first) {\n        return intersect_parts_helper(r, first, first_mat, first_inv, first_no, second_no);\n    } else {\n        return intersect_parts_helper(r, first, second_mat, second_inv, second_no, first_no);\n    }\n}\n\nmat4 get_mat(int number) {\n         if (number == 0) { return portal1_p1_mat; }\n    else if (number == 1) { return portal1_p2_mat; }\n    else if (number == 2) { return portal1_p3_mat; }\n\n    else if (number == 3) { return portal2_p1_mat; }\n    else if (number == 4) { return portal2_p2_mat; }\n    else if (number == 5) { return portal2_p3_mat; }\n\n    else if (number == 6) { return portal3_p1_mat; }\n    else if (number == 7) { return portal3_p2_mat; }\n    else if (number == 8) { return portal3_p3_mat; }\n\n    else if (number == 9) { return portal4_p1_mat; }\n    else if (number ==10) { return portal4_p2_mat; }\n    else if (number ==11) { return portal4_p3_mat; }\n\n    else { return portal1_p1_mat; }\n}\n\nmat4 get_mat_inv(int number) {\n         if (number == 0) { return portal1_p1_mat_inv; }\n    else if (number == 1) { return portal1_p2_mat_inv; }\n    else if (number == 2) { return portal1_p3_mat_inv; }\n\n    else if (number == 3) { return portal2_p1_mat_inv; }\n    else if (number == 4) { return portal2_p2_mat_inv; }\n    else if (number == 5) { return portal2_p3_mat_inv; }\n\n    else if (number == 6) { return portal3_p1_mat_inv; }\n    else if (number == 7) { return portal3_p2_mat_inv; }\n    else if (number == 8) { return portal3_p3_mat_inv; }\n\n    else if (number == 9) { return portal4_p1_mat_inv; }\n    else if (number ==10) { return portal4_p2_mat_inv; }\n    else if (number ==11) { return portal4_p3_mat_inv; }\n\n    else { return portal1_p1_mat; }\n}\n\nSceneIntersection pp(\n    SceneIntersection sc,\n    Ray r,\n    bool first,\n    int ar, int ap,\n    int br, int bp\n) {\n    int a = ar * 3 + ap;\n    int b = br * 3 + bp;\n    SceneIntersection ihit = intersect_parts(\n      r,\n      first,\n      get_mat(a),\n      get_mat_inv(a),\n      float(a) + 0.1,\n      get_mat(b),\n      get_mat_inv(b),\n      float(b) + 0.1\n    );\n    if (nearer(sc, ihit)) { sc = ihit; }\n    return sc;\n}")),"part2")},storage_order:[(2),(0),(1),(3),(4),(5)]),animations_filters:(uniforms:({}),matrices:({}),cameras:({})),elements_descriptions:(uniforms:({}),matrices:({}),cameras:({})),user_uniforms:(uniforms:({}),matrices:({})),animation_stages:(ids:(available:[],max:0),storage:{},storage_order:[]),current_stage:None,dev_stage:(uniforms:({((1)):Float((min:Some(0),max:None,value:4)),((6)):Progress(0),((10)):Float((min:Some(0),max:None,value:0.35)),((8)):Bool(false),((7)):Bool(true),((2)):Float((min:Some(0),max:None,value:4)),((0)):Float((min:Some(0),max:None,value:4)),((12)):Progress(0),((11)):Bool(false),((9)):Float((min:Some(0),max:None,value:0.21))}),matrices:({((38)):Mul(to:Some(((18))),what:Some(((14)))),((17)):Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((22)):Mul(to:Some(((17))),what:Some(((15)))),((27)):Mul(to:Some(((21))),what:Some(((36)))),((29)):Simple(offset:(15,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((14)):Mul(to:Some(((43))),what:Some(((29)))),((13)):Mul(to:Some(((44))),what:Some(((28)))),((24)):Mul(to:Some(((21))),what:Some(((15)))),((16)):Simple(offset:(0,0,0),scale:1,rotate:(4.71238898038469,0,0),mirror:(false,false,false)),((15)):Mul(to:Some(((45))),what:Some(((30)))),((39)):Mul(to:Some(((21))),what:Some(((14)))),((30)):Simple(offset:(30,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((23)):Mul(to:Some(((18))),what:Some(((15)))),((20)):Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((0)):Simple(offset:(0,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((37)):Mul(to:Some(((17))),what:Some(((14)))),((33)):Mul(to:Some(((17))),what:Some(((13)))),((28)):Simple(offset:(0,0,0),scale:0.89,rotate:(0,0,0),mirror:(false,false,false)),((25)):Mul(to:Some(((17))),what:Some(((36)))),((35)):Mul(to:Some(((21))),what:Some(((13)))),((19)):Simple(offset:(0,0,0),scale:1,rotate:(1.5707963267948966,1.5707963267948966,0),mirror:(false,false,false)),((36)):Mul(to:Some(((46))),what:Some(((42)))),((26)):Mul(to:Some(((18))),what:Some(((36)))),((42)):Simple(offset:(45,0,0),scale:1,rotate:(0,0,0),mirror:(false,false,false)),((21)):Simple(offset:(0,0,0),scale:1,rotate:(1.5707963267948966,1.5707963267948966,0),mirror:(false,false,false)),((34)):Mul(to:Some(((18))),what:Some(((13)))),((18)):Simple(offset:(0,0,0),scale:1,rotate:(1.5707963267948966,3.141592653589793,1.5707963267948966),mirror:(false,false,false))})),use_time:false)