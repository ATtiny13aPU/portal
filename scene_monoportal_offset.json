{"description_en":"# Offsetting monoportal\n\nThis monoportal offsets input by half of its height. To save continuity, it need to be supported with two more portals.\n\nOnly offsetting by half-width and 0-width resulting in continuous portal, you can view that other types of offsetting is breaks portal and image.","description_ru":"","uniforms":{"names":["offset","height","off_hei","h2p","h2m","off_h2p","width","radius"],"storage":[{"Float":0.5},{"Float":7.99},{"Formula":"offset * height"},{"Formula":"height/2"},{"Formula":"-height/2"},{"Formula":"off_hei-h2p"},{"Float":3.73},{"Float":3.48}]},"matrices":{"names":["id","a","b","p1","p2","p3","p4","p5","p6","tri","b1","a2","b2"],"storage":[{"Simple":{"offset":[0.0,0.0,0.0],"scale":1.0,"rotate":[0.0,0.0,0.0],"mirror":[false,false,false]}},{"Parametrized":{"offset":{"x":{"No":0.0},"y":{"Yes":"h2m"},"z":{"No":0.0}},"rotate":{"x":{"No":0.0},"y":{"No":0.0},"z":{"No":0.0}},"mirror":{"x":{"No":0.0},"y":{"No":0.0},"z":{"No":0.0}},"scale":{"No":1.0}}},{"Parametrized":{"offset":{"x":{"No":0.0},"y":{"Yes":"off_h2p"},"z":{"No":0.0}},"rotate":{"x":{"No":0.0},"y":{"No":3.1415927},"z":{"No":0.0}},"mirror":{"x":{"No":0.0},"y":{"No":0.0},"z":{"No":0.0}},"scale":{"No":1.0}}},{"Simple":{"offset":[0.0,0.0,4.0],"scale":1.0,"rotate":[0.0,0.0,0.0],"mirror":[false,false,false]}},{"Simple":{"offset":[0.0,0.0,-4.0],"scale":1.0,"rotate":[0.0,0.0,0.0],"mirror":[false,false,false]}},{"Simple":{"offset":[0.0,4.0,0.0],"scale":1.0,"rotate":[1.5707964,0.0,0.0],"mirror":[false,false,false]}},{"Simple":{"offset":[0.0,-4.0,0.0],"scale":1.0,"rotate":[1.5707964,0.0,0.0],"mirror":[false,false,false]}},{"Simple":{"offset":[4.0,0.0,0.0],"scale":1.0,"rotate":[0.0,1.5707964,0.0],"mirror":[false,false,false]}},{"Simple":{"offset":[-4.0,0.0,0.0],"scale":1.0,"rotate":[0.0,1.5707964,0.0],"mirror":[false,false,false]}},{"Simple":{"offset":[0.13,0.78,0.85],"scale":1.0,"rotate":[1.5707964,0.0,3.1415927],"mirror":[false,false,false]}},{"Teleport":{"first_portal":"b2","second_portal":"a2","what":"b"}},{"Parametrized":{"offset":{"x":{"No":0.0},"y":{"Yes":"h2m"},"z":{"No":0.0}},"rotate":{"x":{"No":4.712389},"y":{"No":0.0},"z":{"No":0.0}},"mirror":{"x":{"No":0.0},"y":{"No":0.0},"z":{"No":0.0}},"scale":{"No":1.0}}},{"Parametrized":{"offset":{"x":{"No":0.0},"y":{"Yes":"h2p"},"z":{"No":0.0}},"rotate":{"x":{"No":4.712389},"y":{"No":0.0},"z":{"No":0.0}},"mirror":{"x":{"No":0.0},"y":{"No":0.0},"z":{"No":0.0}},"scale":{"No":1.0}}}]},"objects":{"names":["0","1","2","3","4","5","triangle","monoportal","teleported monoportal","circle portals"],"storage":[{"Flat":{"kind":{"Simple":"p1"},"is_inside":"return is_inside_square(x, y, green_M);"}},{"Flat":{"kind":{"Simple":"p2"},"is_inside":"return is_inside_square(x, y, red_M);"}},{"Flat":{"kind":{"Simple":"p3"},"is_inside":"return is_inside_square(x, y, black_M);"}},{"Flat":{"kind":{"Simple":"p4"},"is_inside":"return is_inside_square(x, y, gray_M);"}},{"Flat":{"kind":{"Simple":"p5"},"is_inside":"return is_inside_square(x, y, gray_M);"}},{"Flat":{"kind":{"Simple":"p6"},"is_inside":"return is_inside_square(x, y, black_M);"}},{"Flat":{"kind":{"Simple":"tri"},"is_inside":"if ((b_mat_inv * pos).z > 0.) return NOT_INSIDE;\n\nreturn is_inside_triangle(x, y, 2.0, 0.6, 0.05, black_solid_M, white_solid_M);"}},{"Flat":{"kind":{"Portal":["a","b"]},"is_inside":"int material = blue_M;\nif (!first) {\n  material = orange_M;\n}\nfloat h = off_hei_u;\nfloat border = 0.05;\n\nif (between(0., x, width_u/2.) && between(0., y, height_u-h)) {\n  if (back) {\n    return material;\n  } else {\n    return TELEPORT;\n  }\n} else if (between(width_u/2., x, width_u/2. + border) && between(0., y, height_u-h)) {\n  return material;\n} else {\n  return NOT_INSIDE;\n}"}},{"Flat":{"kind":{"Portal":["a","b1"]},"is_inside":"int material = blue_M;\nif (!first) {\n  material = orange_M;\n}\nfloat h = off_hei_u;\nfloat border = 0.05;\n\nif (between(0., x, width_u/2.) && between(height_u-h, y, height_u)) {\n  if (back) {\n    return material;\n  } else {\n    return TELEPORT;\n  }\n} else if (between(width_u/2., x, width_u/2. + border) && between(height_u-h, y, height_u)) {\n  return material;\n} else {\n  return NOT_INSIDE;\n}"}},{"Flat":{"kind":{"Portal":["a2","b2"]},"is_inside":"int material = blue_M;\nif (!first) {\n  material = orange_M;\n}\nfloat border = 0.05;\nfloat hh = 1.0;\nfloat ww = width_u/2. + 1.;\n\nif (between(-ww, x, ww) && between(-hh, y, hh)) {\n  if (back) {\n    return material;\n  } else {\n    return TELEPORT;\n  }\n} else if (between(-ww-border, x, ww+border) && between(-hh-border, y, hh+border)) {\n  return material;\n} else {\n  return NOT_INSIDE;\n}"}}]},"materials":{"names":["black","green","red","gray","black_solid","white_solid","blue","orange","sphere","green2"],"storage":[{"Simple":{"color":[0.054903064,0.054903064,0.054903064],"normal_coef":0.5,"grid":true,"grid_scale":1.0,"grid_coef":0.3}},{"Simple":{"color":[0.30508098,0.73873776,0.20860045],"normal_coef":0.5,"grid":true,"grid_scale":1.0,"grid_coef":0.3}},{"Simple":{"color":[0.5669161,0.037726384,0.037726384],"normal_coef":0.5,"grid":true,"grid_scale":1.0,"grid_coef":0.3}},{"Simple":{"color":[0.3473362,0.3473362,0.3473362],"normal_coef":0.5,"grid":true,"grid_scale":1.0,"grid_coef":0.3}},{"Simple":{"color":[0.0,0.0,0.0],"normal_coef":0.5,"grid":false,"grid_scale":4.0,"grid_coef":0.3}},{"Simple":{"color":[0.7032436,0.7032436,0.7032436],"normal_coef":0.5,"grid":false,"grid_scale":4.0,"grid_coef":0.3}},{"Simple":{"color":[0.05806269,0.7189187,0.9494929],"normal_coef":0.5,"grid":false,"grid_scale":4.0,"grid_coef":0.3}},{"Simple":{"color":[0.8128055,0.19476937,0.04093266],"normal_coef":0.5,"grid":false,"grid_scale":4.0,"grid_coef":0.3}},{"Refract":{"refractive_index":1.5,"add_to_color":[1.0,1.0,1.0]}},{"Simple":{"color":[0.09210875,0.72849244,0.06813221],"normal_coef":0.5,"grid":true,"grid_scale":4.0,"grid_coef":0.3}}]},"library":{"names":["my library"],"storage":["int is_inside_square(float x, float y, int material) {\n  if (abs(x) < 4. && abs(y) < 4.) {\n    return material;\n  } else {\n    return NOT_INSIDE;\n  }\n}\n\nint is_inside_triangle(float x, float y, float angle, float width, float border, int inner_m, int border_m) {\n  float value = width - abs(x)*angle;\n  if (y > border && abs(y) < value) {\n    return inner_m;\n  } else if (y > 0. && abs(y) < value + border*angle) {\n    return border_m;\n  } else {\n    return NOT_INSIDE;\n  }\n}"]}}